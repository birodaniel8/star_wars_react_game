{"version":3,"sources":["actions/types.js","reducers/card.js","reducers/data.js","reducers/game.js","reducers/index.js","store.js","components/SampleWithoutReplacement.js","actions/card.js","actions/game.js","styles.js","components/StartGameButton.js","components/Header.js","components/cards/CardItem.js","components/cards/Character.js","components/cards/Planet.js","components/cards/Movie.js","components/cards/Species.js","components/cards/Spaceship.js","components/cards/Vehicle.js","components/cards/PropertyCard.js","components/cards/Home.js","components/cards/Final.js","components/CardSelector.js","components/App.js","actions/data.js","components/Root.js","index.js"],"names":["SET_CARD","LOAD_DATA","SET_SPECIAL_CARD","SET_GAME_SETTINGS","RESET_COUNTER","ADD_TO_COUNTER","ADD_TO_PATH","initialState","selectedCard","type","name","propertyInfo","selectedSpecialCard","data","movies","characters","planets","species","spaceships","vehicles","settings","on","target","explore","counter","cardPath","combineReducers","card","state","action","payload","game","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","sampleWithoutReplacement","bucket","n","Math","min","length","idxs","Array","keys","getRandomIndex","randomIndex","floor","random","splice","sampled","i","push","setCard","cardType","dispatch","setGameSettings","resetCounter","useStyles","makeStyles","itemBtn","width","gameCard","boxShadow","overflow","backgroundColor","gameCardTitle","height","marginBottom","marginTop","paddingTop","fontSize","propertyCardTitle","header","homeCard","mainStartButton","exploreStartButton","gameTitle","exploreButton","instructions","justifyContent","color","display","marginLeft","instructionText","textAlign","padding","lineHeight","connect","buttonText","buttonStyleClass","classes","Button","className","variant","onClick","sampledCharacters","Paper","Grid","container","spacing","item","xs","align","Typography","style","alignItems","getByURL","propertyItemList","url","fieldName","filter","CardItem","property","propertyName","setCardType","charAt","toUpperCase","slice","replace","isArray","map","splittetProperty","split","sp","renderButton","defaultProps","character","img_src","process","src","alt","planet","movie","title","spaceship","vehicle","filteredList","sampledList","pluralizedSelectedSpecialCard","isNaN","prop","includes","console","log","element","useState","showInstructions","setShowInstructions","hidden","margin","fontWeight","setSpecialCard","addToPath","loadData","addToCounter","currentCounter","allLoaded","setAllLoaded","useEffect","fetch","then","response","json","Object","entries","entry","every","LinearProgress","value","Container","maxWidth","Root","THEME","createMuiTheme","typography","fontFamily","fontWeightLight","fontWeightRegular","fontWeightMedium","palette","primary","main","theme","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.28d080c6.chunk.js","sourcesContent":["export const SET_CARD = \"SET_CARD\";\r\nexport const LOAD_DATA = \"LOAD_DATA\";\r\nexport const SET_SPECIAL_CARD = \"SET_SPECIAL_CARD\";\r\nexport const SET_GAME_SETTINGS = \"SET_GAME_SETTINGS\";\r\nexport const RESET_COUNTER = \"RESET_COUNTER\";\r\nexport const ADD_TO_COUNTER = \"ADD_TO_COUNTER\";\r\nexport const ADD_TO_PATH = \"ADD_TO_PATH\"","/* eslint-disable import/no-anonymous-default-export */\r\nimport { SET_CARD, SET_SPECIAL_CARD } from \"../actions/types.js\";\r\n\r\nconst initialState = {\r\n  selectedCard: {\r\n    type: null,\r\n    name: null,\r\n    propertyInfo: {},\r\n  },\r\n  selectedSpecialCard: null,\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case SET_CARD:\r\n      return {\r\n        ...state,\r\n        selectedCard: action.payload,\r\n      };\r\n    case SET_SPECIAL_CARD:\r\n      return {\r\n        ...state,\r\n        selectedSpecialCard: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nimport { LOAD_DATA } from \"../actions/types.js\";\r\n\r\nconst initialState = {\r\n  data: {\r\n    movies: [],\r\n    characters: [],\r\n    planets: [],\r\n    species: [],\r\n    spaceships: [],\r\n    vehicles: [],\r\n  },\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case LOAD_DATA:\r\n      return {\r\n        ...state,\r\n        data: { ...state.data, ...action.payload },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nimport { SET_GAME_SETTINGS, ADD_TO_COUNTER, RESET_COUNTER, ADD_TO_PATH } from \"../actions/types.js\";\r\n\r\nconst initialState = {\r\n  settings: {\r\n    on: false,\r\n    target: null,\r\n    explore: false,\r\n  },\r\n  counter: -1,\r\n  cardPath: [],\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case SET_GAME_SETTINGS:\r\n      return {\r\n        ...state,\r\n        settings: action.payload,\r\n      };\r\n    case ADD_TO_COUNTER:\r\n      return {\r\n        ...state,\r\n        counter: action.payload\r\n      }\r\n    case RESET_COUNTER:\r\n      return {\r\n        ...state,\r\n        counter: -1,\r\n        cardPath: [],\r\n      }\r\n    case ADD_TO_PATH:\r\n      return {\r\n        ...state,\r\n        cardPath: [...state.cardPath, action.payload]\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport card from \"./card\";\r\nimport data from \"./data\";\r\nimport game from \"./game\";\r\n\r\nexport default combineReducers({\r\n  card,\r\n  data,\r\n  game,\r\n});\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers'\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware)),\r\n);\r\n\r\nexport default store;","const sampleWithoutReplacement = (bucket, n) => {\r\n  n = Math.min(n, bucket.length);\r\n\r\n  // Array of indeces 0 to n:\r\n  var idxs = [...Array(bucket.length).keys()]\r\n\r\n  // Select a random index and remove it while returning:\r\n  const getRandomIndex = () => {\r\n    var randomIndex = Math.floor(Math.random() * idxs.length);\r\n    return idxs.splice(randomIndex, 1)[0];\r\n  };\r\n\r\n  var sampled = [];\r\n  for (var i = 0; i < n; i++) {\r\n    sampled.push(bucket[getRandomIndex()]);\r\n  }\r\n\r\n  return sampled;\r\n};\r\n\r\nexport default sampleWithoutReplacement","import { SET_CARD, SET_SPECIAL_CARD } from \"../actions/types.js\";\r\n\r\n// Set card:\r\nexport const setCard = (cardType = null, name = null, propertyInfo = {}) => (dispatch) => {\r\n  dispatch({\r\n    type: SET_CARD,\r\n    payload: {\r\n      type: cardType,\r\n      name: name,\r\n      propertyInfo: propertyInfo,\r\n    },\r\n  });\r\n};\r\n\r\n// Set special card:\r\nexport const setSpecialCard = (type) => (dispatch) => {\r\n  dispatch({\r\n    type: SET_SPECIAL_CARD,\r\n    payload: type,\r\n  });\r\n};\r\n","import { SET_GAME_SETTINGS, ADD_TO_COUNTER, RESET_COUNTER, ADD_TO_PATH } from \"../actions/types.js\";\r\n\r\n// Set Game Settings:\r\nexport const setGameSettings = (settings) => (dispatch) => {\r\n  dispatch({\r\n    type: SET_GAME_SETTINGS,\r\n    payload: settings,\r\n  });\r\n};\r\n\r\n// Add to counter:\r\nexport const addToCounter = (currentCounter) => (dispatch) => {\r\n  dispatch({\r\n    type: ADD_TO_COUNTER,\r\n    payload: currentCounter + 1,\r\n  });\r\n};\r\n\r\n// Add to counter:\r\nexport const resetCounter = () => (dispatch) => {\r\n  dispatch({\r\n    type: RESET_COUNTER,\r\n    payload: null,\r\n  });\r\n};\r\n\r\n// Add to counter:\r\nexport const addToPath = (item) => (dispatch) => {\r\n  dispatch({\r\n    type: ADD_TO_PATH,\r\n    payload: item,\r\n  });\r\n};","import { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n  itemBtn: {\r\n    width: \"90%\",\r\n  },\r\n  gameCard: {\r\n    boxShadow: \"0px 0px 3px 3px rgba(250, 250, 250, 0.3)\",\r\n    overflow: \"hidden\",\r\n    backgroundColor: \"#f3f3f3\",\r\n  },\r\n  gameCardTitle: {\r\n    height: \"50px\",\r\n    backgroundColor: \"#e0bea4\",\r\n    marginBottom: \"15px\",\r\n    marginTop: \"-4px\",\r\n    paddingTop: \"10px\",\r\n    fontSize: 20,\r\n  },\r\n  propertyCardTitle: {\r\n    height: \"25px\",\r\n    backgroundColor: \"#F0EBBA\",\r\n    marginTop: \"-16px\",\r\n    marginBottom: \"10px\",\r\n    fontSize: 15,\r\n  },\r\n  header: {\r\n    backgroundColor: \"#f3f3f3\",\r\n  },\r\n  homeCard: {\r\n    backgroundColor: \"rgba(255, 255, 255, 0)\",\r\n  },\r\n  mainStartButton: {\r\n    fontSize: 30,\r\n    height: \"70px\",\r\n    width: \"350px\",\r\n    marginTop: \"20px\",\r\n  },\r\n  exploreStartButton: {\r\n    width: \"100%\"\r\n  },\r\n  gameTitle: {},\r\n  exploreButton: {\r\n    fontSize: 20,\r\n    height: \"40px\",\r\n    width: \"350px\",\r\n  },\r\n  instructions: {\r\n    justifyContent: \"center\",\r\n    marginTop: \"25px\",\r\n    color: \"white\",\r\n    display: \"flex\",\r\n    width: \"60%\",\r\n    marginLeft: \"20%\",\r\n  },\r\n  instructionText: {\r\n    textAlign: \"left\",\r\n    marginTop: \"10px\", \r\n    color: \"black\",\r\n    marginLeft: \"7%\",\r\n    width: \"86%\",\r\n    backgroundColor: \"rgba(250, 250, 250, 0.95)\",\r\n    padding: \"10px\",\r\n    '& p': {\r\n      lineHeight: 1.2,\r\n      marginBottom: \"10px\",\r\n    }\r\n  }\r\n});\r\n\r\nexport default useStyles;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport sampleWithoutReplacement from \"./SampleWithoutReplacement\";\r\nimport { setCard } from \"../actions/card\";\r\nimport { setGameSettings, resetCounter } from \"../actions/game\";\r\nimport useStyles from \"../styles\";\r\n\r\nconst StartGameButton = ({ buttonText, setGameSettings, setCard, resetCounter, settings, data, buttonStyleClass }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Button\r\n      className={classes[buttonStyleClass]}\r\n      variant=\"contained\"\r\n      color=\"primary\"\r\n      onClick={() => {\r\n        const sampledCharacters = sampleWithoutReplacement(data.characters, 2);\r\n        setGameSettings({ ...settings, target: sampledCharacters[1].name, on: true, explore: false });\r\n        setCard(\"character\", sampledCharacters[0].name);\r\n        resetCounter();\r\n      }}\r\n    >\r\n      {buttonText}\r\n    </Button>\r\n  );\r\n};\r\n\r\n// PropTypes:\r\nStartGameButton.propTypes = {\r\n  buttonText: PropTypes.string.isRequired,\r\n  setCard: PropTypes.func.isRequired,\r\n  setGameSettings: PropTypes.func.isRequired,\r\n  resetCounter: PropTypes.func.isRequired,\r\n  settings: PropTypes.object.isRequired,\r\n  buttonStyleClass: PropTypes.string.isRequired,\r\n};\r\n\r\n// mapStateToProps:\r\nconst mapStateToProps = (state) => ({\r\n  data: state.data.data,\r\n  settings: state.game.settings,\r\n});\r\n\r\nexport default connect(mapStateToProps, { setCard, setGameSettings, resetCounter })(StartGameButton);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport { LinearProgress, Button, Container, Typography, Paper, Grid } from \"@material-ui/core\";\r\nimport \"./App.css\";\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport StartGameButton from \"./StartGameButton\";\r\nimport { setCard } from \"../actions/card\";\r\nimport { setGameSettings } from \"../actions/game\";\r\nimport useStyles from \"../styles\";\r\n\r\nconst Header = ({ counter, settings, setCard, setGameSettings }) => {\r\n  const classes = useStyles();\r\n\r\n  if (settings.on) {\r\n    return (\r\n      <Paper className={classes.header}>\r\n        <Grid container spacing={1}>\r\n          <Grid item xs={8} align=\"center\">\r\n            <Typography>Target character: </Typography>\r\n            <Button style={{ width: \"100%\" }}> {settings.target} </Button>\r\n          </Grid>\r\n          <Grid item xs={2} align=\"center\">\r\n            <Typography>Steps:</Typography>\r\n            <Button style={{ width: \"100%\" }}> {counter} </Button>\r\n          </Grid>\r\n          <Grid item xs={2} align=\"center\" style={{display: \"flex\", justifyContent: \"center\", alignItems: \"center\"}}>\r\n            <CancelIcon\r\n              fontSize=\"large\"\r\n              color=\"error\"\r\n              onClick={() => {\r\n                setCard(\"Home\");\r\n                setGameSettings({ ...settings, on: false });\r\n              }}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    );\r\n  }\r\n  if (settings.explore) {\r\n    return <StartGameButton buttonText=\"Start Game Now\" buttonStyleClass=\"exploreStartButton\"/>;\r\n  }\r\n  return <div></div>;\r\n};\r\n\r\n// PropTypes:\r\nHeader.propTypes = {\r\n  setCard: PropTypes.func.isRequired,\r\n  counter: PropTypes.number.isRequired,\r\n  settings: PropTypes.object.isRequired,\r\n  setGameSettings: PropTypes.func.isRequired,\r\n};\r\n\r\n// mapStateToProps:\r\nconst mapStateToProps = (state) => ({\r\n  counter: state.game.counter,\r\n  settings: state.game.settings,\r\n});\r\n\r\nexport default connect(mapStateToProps, { setCard, setGameSettings })(Header);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport { Button, Grid } from \"@material-ui/core\";\r\n\r\nimport useStyles from \"../../styles\";\r\nimport { setCard } from \"../../actions/card\";\r\nimport sampleWithoutReplacement from \"../SampleWithoutReplacement\";\r\n\r\nconst getByURL = (propertyItemList, url, fieldName = \"name\") => {\r\n  // returns the item's fieldName value given by the url\r\n  return propertyItemList.filter((item) => item.url === url)[0][fieldName];\r\n};\r\n\r\nconst CardItem = ({ item, property, propertyName, propertyItemList, fieldName, setCard, setCardType }) => {\r\n  const classes = useStyles();\r\n\r\n  // propertyName formatting:\r\n  if (!propertyName) {\r\n    propertyName = property.charAt(0).toUpperCase() + property.slice(1);\r\n  }\r\n  propertyName = propertyName.replace(/_/g, \" \");\r\n\r\n  const renderButton = () => {\r\n    if (propertyItemList) {\r\n      if (Array.isArray(item[property])) {\r\n        // if the property is an array of urls (eg. list of movie urls):\r\n        const sampledItems = sampleWithoutReplacement(item[property], 5);\r\n        return sampledItems.map((i) => {\r\n          const name = getByURL(propertyItemList, i, fieldName);\r\n          return (\r\n            <Button className={classes.itemBtn} variant=\"contained\" onClick={() => setCard(setCardType, name)}>\r\n              {name}\r\n            </Button>\r\n          );\r\n        });\r\n      }\r\n      // if the property is a single url:\r\n      const name = getByURL(propertyItemList, item[property], fieldName);\r\n      return (\r\n        <Button className={classes.itemBtn} variant=\"contained\" onClick={() => setCard(setCardType, name)}>\r\n          {name}\r\n        </Button>\r\n      );\r\n    }\r\n    // if the property is a string with a list of comma separated characteristics:\r\n    const splittetProperty = item[property].split(\", \");\r\n    if (splittetProperty.length > 1) {\r\n      return splittetProperty.map((sp) => (\r\n        <Button\r\n          className={classes.itemBtn}\r\n          variant=\"contained\"\r\n          onClick={() => setCard(setCardType, sp, { property: property, fieldName: fieldName })}\r\n        >\r\n          {sp}\r\n        </Button>\r\n      ));\r\n    }\r\n\r\n    // if the property is a single value:\r\n    return (\r\n      <Button\r\n        className={classes.itemBtn}\r\n        variant=\"contained\"\r\n        onClick={() => setCard(setCardType, item[property], { property: property, fieldName: fieldName })}\r\n      >\r\n        {item[property]}\r\n      </Button>\r\n    );\r\n  };\r\n\r\n  // rendering the item if the item[property] is available:\r\n  if (item[property] && item[property] !== \"unknown\" && item[property] !== \"n/a\" && item[property].length > 0) {\r\n    return (\r\n      <Grid container spacing={1} style={{marginBottom: \"3px\"}}>\r\n        <Grid item xs={5} align=\"right\">\r\n          <b>{propertyName}:</b>\r\n        </Grid>\r\n        <Grid item xs={7} align=\"left\">\r\n          {renderButton()}\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n  return <div></div>;\r\n};\r\n\r\n// PropTypes:\r\nCardItem.propTypes = {\r\n  item: PropTypes.object.isRequired,\r\n  property: PropTypes.string.isRequired,\r\n  propertyName: PropTypes.string,\r\n  propertyItemList: PropTypes.array,\r\n  fieldName: PropTypes.string,\r\n  setCard: PropTypes.func.isRequired,\r\n  setCardType: PropTypes.string,\r\n};\r\n\r\nCardItem.defaultProps = {\r\n  propertyName: null,\r\n  propertyItemList: null,\r\n  fieldName: \"name\",\r\n  setCardType: \"property\",\r\n};\r\n\r\n// mapStateToProps:\r\nconst mapStateToProps = (state) => ({\r\n  data: state.data.data,\r\n});\r\n\r\nexport default connect(mapStateToProps, { setCard })(CardItem);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport { Paper, Grid, Typography } from \"@material-ui/core\";\r\n\r\nimport useStyles from \"../../styles\";\r\nimport CardItem from \"./CardItem\";\r\n\r\nconst Character = ({ name, data }) => {\r\n  const classes = useStyles();\r\n  const character = data.characters.filter((character) => character.name === name)[0];\r\n  const img_src = `${process.env.PUBLIC_URL}/sw_pics/${character.name.replace(\"/\", \"-\")}.png`\r\n\r\n  return (\r\n    <Paper className={classes.gameCard}>\r\n      <img src={img_src} alt=\"\" width=\"100%\"/>\r\n      <Typography className={classes.gameCardTitle}>\r\n        {character.name}\r\n      </Typography>\r\n      <Grid container spacing={1}>\r\n        <CardItem item={character} property=\"homeworld\" propertyItemList={data.planets} setCardType=\"planet\" />\r\n        <CardItem item={character} property=\"species\" propertyItemList={data.species} setCardType=\"species\" />\r\n        <CardItem\r\n          item={character}\r\n          property=\"films\"\r\n          propertyName=\"Movies\"\r\n          propertyItemList={data.movies}\r\n          setCardType=\"movie\"\r\n          fieldName=\"title\"\r\n        />\r\n        <CardItem item={character} property=\"gender\" />\r\n        <CardItem item={character} property=\"skin_color\" />\r\n        <CardItem item={character} property=\"birth_year\" />\r\n        <CardItem item={character} property=\"eye_color\" />\r\n        <CardItem item={character} property=\"hair_color\" />\r\n        <CardItem item={character} property=\"height\" />\r\n        <CardItem item={character} property=\"mass\" />\r\n        <CardItem\r\n          item={character}\r\n          property=\"starships\"\r\n          propertyName=\"Spaceships\"\r\n          propertyItemList={data.spaceships}\r\n          setCardType=\"spaceship\"\r\n        />\r\n        <CardItem item={character} property=\"vehicles\" propertyItemList={data.vehicles} setCardType=\"vehicle\" />\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n};\r\n\r\n// PropTypes:\r\nCharacter.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n};\r\n\r\n// mapStateToProps:\r\nconst mapStateToProps = (state) => ({\r\n  data: state.data.data,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(Character);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport { Paper, Grid, Typography } from \"@material-ui/core\";\r\n\r\nimport useStyles from \"../../styles\";\r\nimport CardItem from \"./CardItem\";\r\n\r\nconst Planet = ({ name, data }) => {\r\n  const classes = useStyles();\r\n  const planet = data.planets.filter((planet) => planet.name === name)[0];\r\n  const img_src = `${process.env.PUBLIC_URL}/sw_pics/${planet.name.replace(\"/\", \"-\")}.png`\r\n\r\n  return (\r\n    <Paper className={classes.gameCard}>\r\n      <img src={img_src} alt=\"\" width=\"100%\"/>\r\n      <Typography className={classes.gameCardTitle}>\r\n        {planet.name}\r\n      </Typography>\r\n      <Grid container spacing={1}>\r\n        <CardItem item={planet} property=\"climate\" />\r\n        <CardItem item={planet} property=\"diameter\" />\r\n        <CardItem item={planet} property=\"gravity\" />\r\n        <CardItem item={planet} property=\"rotation_period\" />\r\n        <CardItem item={planet} property=\"orbital_period\" />\r\n        <CardItem item={planet} property=\"population\" />\r\n        <CardItem item={planet} property=\"terrain\" />\r\n        <CardItem\r\n          item={planet}\r\n          property=\"films\"\r\n          propertyName=\"Movies\"\r\n          propertyItemList={data.movies}\r\n          fieldName=\"title\"\r\n          setCardType=\"movie\"\r\n        />\r\n        <CardItem item={planet} property=\"residents\" propertyItemList={data.characters} setCardType=\"character\" />\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n};\r\n\r\n// PropTypes:\r\nPlanet.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n};\r\n\r\n// mapStateToProps:\r\nconst mapStateToProps = (state) => ({\r\n  data: state.data.data,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(Planet);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport { Paper, Grid, Typography } from \"@material-ui/core\";\r\n\r\nimport useStyles from \"../../styles\";\r\nimport CardItem from \"./CardItem\";\r\n\r\nconst Movie = ({ name, data }) => {\r\n  const classes = useStyles();\r\n  const movie = data.movies.filter((movie) => movie.title === name)[0];\r\n  const img_src = `${process.env.PUBLIC_URL}/sw_pics/${movie.title.replace(\"/\", \"-\")}.png`\r\n\r\n  return (\r\n    <Paper className={classes.gameCard}>\r\n      <img src={img_src} alt=\"\" width=\"100%\"/>\r\n      <Typography className={classes.gameCardTitle}>\r\n        {movie.title}\r\n      </Typography>\r\n      <Grid container spacing={1}>\r\n        <CardItem item={movie} property=\"director\" fieldName=\"title\"/>\r\n        <CardItem item={movie} property=\"producer\" fieldName=\"title\"/>\r\n        <CardItem item={movie} property=\"release_date\" fieldName=\"title\"/>\r\n        <CardItem item={movie} property=\"characters\" propertyItemList={data.characters} setCardType=\"character\" />\r\n        <CardItem item={movie} property=\"planets\" propertyItemList={data.planets} setCardType=\"planet\" />\r\n        <CardItem item={movie} property=\"species\" propertyItemList={data.species} setCardType=\"species\" />\r\n        <CardItem\r\n          item={movie}\r\n          property=\"starships\"\r\n          propertyName=\"Spaceships\"\r\n          propertyItemList={data.spaceships}\r\n          setCardType=\"spaceship\"\r\n        />\r\n        <CardItem item={movie} property=\"vehicles\" propertyItemList={data.vehicles} setCardType=\"vehicle\" />\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n};\r\n\r\n// PropTypes:\r\nMovie.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n};\r\n\r\n// mapStateToProps:\r\nconst mapStateToProps = (state) => ({\r\n  data: state.data.data,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(Movie);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport { Paper, Grid, Typography } from \"@material-ui/core\";\r\n\r\nimport useStyles from \"../../styles\";\r\nimport CardItem from \"./CardItem\";\r\n\r\nconst Species = ({ name, data }) => {\r\n  const classes = useStyles();\r\n  const species = data.species.filter((species) => species.name === name)[0];\r\n  const img_src = `${process.env.PUBLIC_URL}/sw_pics/${species.name.replace(\"/\", \"-\")}.png`\r\n\r\n  return (\r\n    <Paper className={classes.gameCard}>\r\n      <img src={img_src} alt=\"\" width=\"100%\"/>\r\n      <Typography className={classes.gameCardTitle}>\r\n        {species.name}\r\n      </Typography>\r\n      <Grid container spacing={1}>\r\n        <CardItem item={species} property=\"homeworld\" propertyItemList={data.planets} setCardType=\"planet\" />\r\n        <CardItem item={species} property=\"classification\" />\r\n        <CardItem item={species} property=\"designation\" />\r\n        <CardItem item={species} property=\"language\" />\r\n        <CardItem item={species} property=\"average_lifespan\" />\r\n        <CardItem item={species} property=\"average_height\" />\r\n        <CardItem item={species} property=\"skin_colors\" />\r\n        <CardItem item={species} property=\"hair_colors\" />\r\n        <CardItem item={species} property=\"eye_colors\" />\r\n        <CardItem\r\n          item={species}\r\n          property=\"films\"\r\n          propertyName=\"Movies\"\r\n          propertyItemList={data.movies}\r\n          fieldName=\"title\"\r\n          setCardType=\"movie\"\r\n        />\r\n        <CardItem item={species} property=\"people\" propertyItemList={data.characters} setCardType=\"character\" />\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n};\r\n\r\n// PropTypes:\r\nSpecies.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n};\r\n\r\n// mapStateToProps:\r\nconst mapStateToProps = (state) => ({\r\n  data: state.data.data,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(Species);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport { Paper, Grid, Typography } from \"@material-ui/core\";\r\n\r\nimport useStyles from \"../../styles\";\r\nimport CardItem from \"./CardItem\";\r\n\r\nconst Spaceship = ({ name, data }) => {\r\n  const classes = useStyles();\r\n  const spaceship = data.spaceships.filter((spaceship) => spaceship.name === name)[0];\r\n  const img_src = `${process.env.PUBLIC_URL}/sw_pics/${spaceship.name.replace(\"/\", \"-\")}.png`\r\n\r\n  return (\r\n    <Paper className={classes.gameCard}>\r\n      <img src={img_src} alt=\"\" width=\"100%\"/>\r\n      <Typography className={classes.gameCardTitle}>\r\n        {spaceship.name}\r\n      </Typography>\r\n      <Grid container spacing={1}>\r\n        <CardItem item={spaceship} property=\"model\" />\r\n        <CardItem item={spaceship} property=\"manufacturer\" />\r\n        <CardItem item={spaceship} property=\"cost_in_credits\" />\r\n        <CardItem item={spaceship} property=\"crew\" />\r\n        <CardItem item={spaceship} property=\"length\" />\r\n        <CardItem item={spaceship} property=\"max_atmosphering_speed\" />\r\n        <CardItem item={spaceship} property=\"hyperdrive_rating\" />\r\n        <CardItem\r\n          item={spaceship}\r\n          property=\"films\"\r\n          propertyName=\"Movies\"\r\n          propertyItemList={data.movies}\r\n          fieldName=\"title\"\r\n          setCardType=\"movie\"\r\n        />\r\n        <CardItem item={spaceship} property=\"pilots\" propertyItemList={data.characters} setCardType=\"character\" />\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n};\r\n\r\n// PropTypes:\r\nSpaceship.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n};\r\n\r\n// mapStateToProps:\r\nconst mapStateToProps = (state) => ({\r\n  data: state.data.data,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(Spaceship);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport { Paper, Grid, Typography } from \"@material-ui/core\";\r\n\r\nimport useStyles from \"../../styles\";\r\nimport CardItem from \"./CardItem\";\r\n\r\nconst Vehicle = ({ name, data }) => {\r\n  const classes = useStyles();\r\n  const vehicle = data.vehicles.filter((vehicle) => vehicle.name === name)[0];\r\n  const img_src = `${process.env.PUBLIC_URL}/sw_pics/${vehicle.name.replace(\"/\", \"-\")}.png`\r\n\r\n  return (\r\n    <Paper className={classes.gameCard}>\r\n      <img src={img_src} alt=\"\" width=\"100%\"/>\r\n      <Typography className={classes.gameCardTitle}>\r\n        {vehicle.name}\r\n      </Typography>\r\n      <Grid container spacing={1}>\r\n        <CardItem item={vehicle} property=\"model\" />\r\n        <CardItem item={vehicle} property=\"manufacturer\" />\r\n        <CardItem item={vehicle} property=\"cost_in_credits\" />\r\n        <CardItem item={vehicle} property=\"crew\" />\r\n        <CardItem item={vehicle} property=\"length\" />\r\n        <CardItem item={vehicle} property=\"max_atmosphering_speed\" />\r\n        <CardItem\r\n          item={vehicle}\r\n          property=\"films\"\r\n          propertyName=\"Movies\"\r\n          propertyItemList={data.movies}\r\n          fieldName=\"title\"\r\n          setCardType=\"movie\"\r\n        />\r\n        <CardItem item={vehicle} property=\"pilots\" propertyItemList={data.characters} setCardType=\"character\" />\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n};\r\n\r\n// PropTypes:\r\nVehicle.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n};\r\n\r\n// mapStateToProps:\r\nconst mapStateToProps = (state) => ({\r\n  data: state.data.data,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(Vehicle);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport { Paper, Grid, Button, Typography } from \"@material-ui/core\";\r\n\r\nimport useStyles from \"../../styles\";\r\nimport sampleWithoutReplacement from \"../SampleWithoutReplacement\";\r\nimport { setCard } from \"../../actions/card\";\r\n\r\nconst PropertyCard = ({ name, propertyInfo, data, selectedSpecialCard, setCard, settings }) => {\r\n  const classes = useStyles();\r\n\r\n  const pluralizedSelectedSpecialCard =\r\n    selectedSpecialCard.charAt(selectedSpecialCard.length - 1) === \"s\"\r\n      ? selectedSpecialCard\r\n      : selectedSpecialCard + \"s\";\r\n\r\n  var filteredList;\r\n  if (isNaN(name)) {\r\n    // if it is a birth year:\r\n    if (name.slice(-3) === \"BBY\" && !isNaN(name.slice(0, -3))) {\r\n      console.log(name.slice(0, -3));\r\n      filteredList = data[pluralizedSelectedSpecialCard].filter(\r\n        (prop) =>\r\n          prop[propertyInfo.property].slice(0, -3) >= name.slice(0, -3) * 0.9 &&\r\n          prop[propertyInfo.property].slice(0, -3) <= name.slice(0, -3) * 1.1\r\n      );\r\n    } else {\r\n      // if it is a normal string:\r\n      filteredList = data[pluralizedSelectedSpecialCard].filter(\r\n        (prop) =>\r\n          prop[propertyInfo.property] === name ||\r\n          prop[propertyInfo.property].includes(name + \",\") ||\r\n          prop[propertyInfo.property].includes(\", \" + name)\r\n      );\r\n    }\r\n  } else {\r\n    // if it is a number:\r\n    filteredList = data[pluralizedSelectedSpecialCard].filter(\r\n      (prop) => prop[propertyInfo.property] >= name * 0.9 && prop[propertyInfo.property] <= name * 1.1\r\n    );\r\n  }\r\n\r\n  var sampledList\r\n  if (settings.explore) {\r\n    sampledList = filteredList\r\n  } else {\r\n    sampledList = sampleWithoutReplacement(filteredList, 5);\r\n  }\r\n\r\n    \r\n  var propertyName = propertyInfo.property.charAt(0).toUpperCase() + propertyInfo.property.slice(1);\r\n  propertyName = propertyName.replace(/_/g, \" \");\r\n\r\n  return (\r\n    <Paper className={classes.gameCard}>\r\n      <Typography className={classes.gameCardTitle}>{name}</Typography>\r\n      <Typography className={classes.propertyCardTitle}>({propertyName})</Typography>\r\n      <Grid container spacing={1}>\r\n        <Grid container spacing={1}>\r\n          <Grid item xs={5} align=\"right\">\r\n            <b>{pluralizedSelectedSpecialCard.charAt(0).toUpperCase() + pluralizedSelectedSpecialCard.slice(1)}:</b>\r\n          </Grid>\r\n          <Grid item xs={7} align=\"left\">\r\n            {sampledList.map((element) => {\r\n              return (\r\n                <Button\r\n                  className={classes.itemBtn}\r\n                  variant=\"contained\"\r\n                  onClick={() => setCard(selectedSpecialCard, element[propertyInfo.fieldName])}\r\n                >\r\n                  {element[propertyInfo.fieldName]}\r\n                </Button>\r\n              );\r\n            })}\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n};\r\n\r\n// PropTypes:\r\nPropertyCard.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  propertyInfo: PropTypes.string.isRequired,\r\n};\r\n\r\n// mapStateToProps:\r\nconst mapStateToProps = (state) => ({\r\n  data: state.data.data,\r\n  selectedSpecialCard: state.card.selectedSpecialCard,\r\n  settings: state.game.settings,\r\n});\r\n\r\nexport default connect(mapStateToProps, { setCard })(PropertyCard);\r\n","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport { Button, Container, Typography, Paper, Grid } from \"@material-ui/core\";\r\n\r\nimport useStyles from \"../../styles\";\r\nimport StartGameButton from \"../StartGameButton\";\r\nimport sampleWithoutReplacement from \"../SampleWithoutReplacement\";\r\nimport { setCard } from \"../../actions/card\";\r\nimport { setGameSettings, resetCounter } from \"../../actions/game\";\r\n\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\r\n\r\nconst Home = ({ data, settings, setCard, setGameSettings, resetCounter }) => {\r\n  const classes = useStyles();\r\n  const img_src = `${process.env.PUBLIC_URL}/main.png`;\r\n  const [showInstructions, setShowInstructions] = useState(false);\r\n\r\n  return (\r\n    <Paper className={classes.homeCard}>\r\n      <img src={img_src} alt=\"\" width=\"100%\" />\r\n      <StartGameButton buttonText=\"Start Game\" buttonStyleClass=\"mainStartButton\" />\r\n      <div></div>\r\n      <Button\r\n        className={classes.exploreButton}\r\n        variant=\"contained\"\r\n        color=\"secondary\"\r\n        onClick={() => {\r\n          setCard(\"character\", sampleWithoutReplacement(data.characters, 1)[0].name);\r\n          resetCounter();\r\n          setGameSettings({ ...settings, explore: true });\r\n        }}\r\n      >\r\n        Explore\r\n      </Button>\r\n\r\n      <Typography className={classes.instructions} onClick={() => setShowInstructions(!showInstructions)}>\r\n        Instructions\r\n        {showInstructions ? (\r\n          <ExpandLessIcon style={{ marginLeft: \"5px\" }} />\r\n        ) : (\r\n          <ExpandMoreIcon style={{ marginLeft: \"5px\" }} />\r\n        )}\r\n      </Typography>\r\n\r\n      <Typography className={classes.instructionText} hidden={!showInstructions}>\r\n        <p>\r\n          The goal of this game is to get to a randomly selected target character from an other randomly selected\r\n          initial character in the least amount of steps.\r\n        </p>\r\n\r\n        <p>\r\n          In each step you can see a card with many properties and clicking on these properties will lead you to a new\r\n          card with new information (e.g. selecting the 'homeworld' will show additional info the planet itself or\r\n          selecting the 'yellow' eye property will list characters with yellow eyes).\r\n        </p>\r\n\r\n        <p>\r\n          Note that each category can only list 5 related items (the movie card will not show you all characters in that\r\n          movie but 5 randomly selected ones).\r\n        </p>\r\n\r\n        <p>\r\n          In the 'explore' mode you don't play a game, however all items in a category is listed to explore the Star\r\n          Wars galaxy.\r\n        </p>\r\n      </Typography>\r\n    </Paper>\r\n  );\r\n};\r\n\r\n// PropTypes:\r\nHome.propTypes = {\r\n  setCard: PropTypes.func.isRequired,\r\n  setGameSettings: PropTypes.func.isRequired,\r\n  resetCounter: PropTypes.func.isRequired,\r\n  settings: PropTypes.object.isRequired,\r\n};\r\n\r\n// mapStateToProps:\r\nconst mapStateToProps = (state) => ({\r\n  data: state.data.data,\r\n  settings: state.game.settings,\r\n});\r\n\r\nexport default connect(mapStateToProps, { setCard, setGameSettings, resetCounter })(Home);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport { Button, Container, Typography, Paper } from \"@material-ui/core\";\r\n\r\nimport sampleWithoutReplacement from \"../SampleWithoutReplacement\";\r\nimport { setCard } from \"../../actions/card\";\r\nimport { setGameSettings, resetCounter } from \"../../actions/game\";\r\n\r\nconst Final = ({ data, settings, counter, cardPath, setCard, setGameSettings, resetCounter }) => {\r\n  return (\r\n    <Paper>\r\n      <Typography style={{ margin: \"20px 0px\", fontWeight: \"bold\" }}>\r\n        Congratulations! You have got to {settings.target} in {counter} steps.\r\n      </Typography>\r\n\r\n      <Typography style={{ margin: \"20px 0px\" }}>\r\n        Your path:\r\n      </Typography>\r\n\r\n      {cardPath.map((item) => <p><b>{item}</b></p>)}\r\n\r\n      <p><b>{settings.target}</b></p>\r\n\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"secondary\"\r\n        onClick={() => {\r\n          const sampledCharacters = sampleWithoutReplacement(data.characters, 2);\r\n          setGameSettings({ ...settings, target: sampledCharacters[1].name, on: true });\r\n          setCard(\"character\", sampledCharacters[0].name);\r\n          resetCounter();\r\n        }}\r\n      >\r\n        Start a New Game\r\n      </Button>\r\n    </Paper>\r\n  );\r\n};\r\n\r\n// PropTypes:\r\nFinal.propTypes = {\r\n  setCard: PropTypes.func.isRequired,\r\n  setGameSettings: PropTypes.func.isRequired,\r\n  resetCounter: PropTypes.func.isRequired,\r\n  settings: PropTypes.object.isRequired,\r\n  counter: PropTypes.number.isRequired,\r\n  cardPath: PropTypes.array.isRequired,\r\n};\r\n\r\n// mapStateToProps:\r\nconst mapStateToProps = (state) => ({\r\n  data: state.data.data,\r\n  settings: state.game.settings,\r\n  counter: state.game.counter,\r\n  cardPath: state.game.cardPath,\r\n});\r\n\r\nexport default connect(mapStateToProps, { setCard, setGameSettings, resetCounter })(Final);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport Character from \"./cards/Character\";\r\nimport Planet from \"./cards/Planet\";\r\nimport Movie from \"./cards/Movie\";\r\nimport Species from \"./cards/Species\";\r\nimport Spaceship from \"./cards/Spaceship\";\r\nimport Vehicle from \"./cards/Vehicle\";\r\nimport PropertyCard from \"./cards/PropertyCard\";\r\nimport Home from \"./cards/Home\";\r\nimport Final from \"./cards/Final\";\r\n\r\nimport { setSpecialCard } from \"../actions/card\";\r\nimport { addToPath } from \"../actions/game\";\r\n\r\nconst CardSelector = ({ selectedCard, setSpecialCard, addToPath }) => {\r\n  selectedCard.type !== \"property\" && setSpecialCard(selectedCard.type);\r\n  addToPath(selectedCard.name)\r\n  switch (selectedCard.type) {\r\n    case \"Home\":\r\n      return <Home/ >\r\n    case \"Final\":\r\n      return <Final/ >\r\n    case \"character\":\r\n      return <Character name={selectedCard.name} />;\r\n    case \"planet\":\r\n      return <Planet name={selectedCard.name} />;\r\n    case \"movie\":\r\n      return <Movie name={selectedCard.name} />;\r\n    case \"species\":\r\n      return <Species name={selectedCard.name} />;\r\n    case \"spaceship\":\r\n      return <Spaceship name={selectedCard.name} />;\r\n    case \"vehicle\":\r\n      return <Vehicle name={selectedCard.name} />;\r\n    case \"property\":\r\n      return <PropertyCard name={selectedCard.name} propertyInfo={selectedCard.propertyInfo} />;\r\n    default:\r\n      return <div></div>;\r\n  }\r\n};\r\n\r\n// PropTypes:\r\nCardSelector.propTypes = {\r\n  selectedCard: PropTypes.object.isRequired,\r\n  setSpecialCard: PropTypes.func.isRequired,\r\n  addToPath: PropTypes.func.isRequired,\r\n};\r\n\r\n// mapStateToProps:\r\nconst mapStateToProps = (state) => ({\r\n  selectedCard: state.card.selectedCard,\r\n});\r\n\r\nexport default connect(mapStateToProps, { setSpecialCard, addToPath })(CardSelector);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport { LinearProgress, Button, Container, Typography } from \"@material-ui/core\";\r\nimport \"./App.css\";\r\n\r\nimport Header from \"./Header\";\r\nimport CardSelector from \"./CardSelector\";\r\nimport { loadData } from \"../actions/data\";\r\nimport { setCard } from \"../actions/card\";\r\nimport { addToCounter } from \"../actions/game\";\r\n\r\nconst App = ({ data, selectedCard, setCard, loadData, settings, counter, addToCounter }) => {\r\n  const [allLoaded, setAllLoaded] = useState(false);\r\n\r\n  const loadAllData = () => {\r\n    fetch(`${process.env.PUBLIC_URL}/sw_api_data/films.json`)\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        loadData({ movies: response[\"items\"] });\r\n      });\r\n    fetch(`${process.env.PUBLIC_URL}/sw_api_data/people.json`)\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        loadData({ characters: response[\"items\"] });\r\n      });\r\n    fetch(`${process.env.PUBLIC_URL}/sw_api_data/planets.json`)\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        loadData({ planets: response[\"items\"] });\r\n      });\r\n    fetch(`${process.env.PUBLIC_URL}/sw_api_data/species.json`)\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        loadData({ species: response[\"items\"] });\r\n      });\r\n    fetch(`${process.env.PUBLIC_URL}/sw_api_data/starships.json`)\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        loadData({ spaceships: response[\"items\"] });\r\n      });\r\n    fetch(`${process.env.PUBLIC_URL}/sw_api_data/vehicles.json`)\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        loadData({ vehicles: response[\"items\"] });\r\n      });\r\n  };\r\n\r\n  useEffect(() => loadAllData(), []);\r\n  useEffect(() => allLoaded && setCard(\"Home\"), [allLoaded]);\r\n  useEffect(() => {\r\n    if (settings.target === selectedCard.name && settings.on === true) {\r\n      setCard(\"Final\");\r\n    } else {\r\n      addToCounter(counter);\r\n    }\r\n  }, [selectedCard]);\r\n  useEffect(() => {\r\n    setAllLoaded(\r\n      Object.entries(data)\r\n        .map((entry) => entry[1].length)\r\n        .every((item) => item > 0)\r\n    );\r\n  }, [data]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <LinearProgress variant=\"determinate\" color=\"primary\" value={allLoaded === true ? 100 : 0} />\r\n      <Container maxWidth=\"xs\">\r\n        <Header />\r\n        <CardSelector />\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\n// PropTypes:\r\nApp.propTypes = {\r\n  selectedCard: PropTypes.object.isRequired,\r\n  setCard: PropTypes.func.isRequired,\r\n  loadData: PropTypes.func.isRequired,\r\n  addToCounter: PropTypes.func.isRequired,\r\n  counter: PropTypes.number.isRequired,\r\n  settings: PropTypes.object.isRequired,\r\n};\r\n\r\n// mapStateToProps:\r\nconst mapStateToProps = (state) => ({\r\n  selectedCard: state.card.selectedCard,\r\n  data: state.data.data,\r\n  counter: state.game.counter,\r\n  settings: state.game.settings,\r\n});\r\n\r\nexport default connect(mapStateToProps, { setCard, loadData, addToCounter })(App);\r\n","import { LOAD_DATA } from \"../actions/types.js\";\r\n\r\n// Set Data:\r\nexport const loadData = (data) => (dispatch) => {\r\n  dispatch({\r\n    type: LOAD_DATA,\r\n    payload: data,\r\n  });\r\n};\r\n","import React from \"react\";\r\nimport { Provider } from \"react-redux\"; // wrap this around everything for redux\r\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\r\nimport store from \"../store\";\r\nimport App from \"./App\";\r\n\r\nconst Root = () => {\r\n  const THEME = createMuiTheme({\r\n    typography: {\r\n      fontFamily: `'Source Code Pro', monospace`,\r\n      fontSize: 14,\r\n      fontWeightLight: 300,\r\n      fontWeightRegular: 400,\r\n      fontWeightMedium: 500,\r\n    },\r\n    palette: {\r\n      primary: {\r\n        main: \"#FFCD00\",\r\n      }\r\n    }\r\n  });\r\n\r\n  return (\r\n    <MuiThemeProvider theme={THEME}>\r\n      <Provider store={store}>\r\n        <div>\r\n          <App />\r\n        </div>\r\n      </Provider>\r\n    </MuiThemeProvider>\r\n  );\r\n};\r\n\r\nexport default Root;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport Root from \"./components/Root\";\r\n\r\nReactDOM.render(<Root />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}