{"version":3,"sources":["actions/types.js","reducers/card.js","reducers/data.js","reducers/game.js","reducers/index.js","store.js","actions/card.js","components/SampleWithoutReplacement.js","components/cards/CardItem.js","components/cards/Character.js","components/cards/Planet.js","components/cards/Movie.js","components/cards/Species.js","components/cards/Spaceship.js","components/cards/Vehicle.js","components/cards/PropertyCard.js","components/CardSelector.js","components/App.js","actions/data.js","actions/game.js","components/Root.js","index.js"],"names":["SET_CARD","LOAD_DATA","SET_SPECIAL_CARD","SET_GAME_SETTINGS","RESET_COUNTER","ADD_TO_COUNTER","initialState","selectedCard","type","name","propertyInfo","selectedSpecialCard","data","movies","characters","planets","species","spaceships","vehicles","settings","on","target","level","explore","counter","combineReducers","card","state","action","payload","game","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","setCard","cardType","dispatch","sampleWithoutReplacement","bucket","n","Math","min","length","idxs","Array","keys","getRandomIndex","randomIndex","floor","random","splice","sampled","i","push","getByURL","itemList","url","fieldName","filter","item","CardItem","property","propertyName","setCardType","charAt","toUpperCase","slice","replace","Grid","container","spacing","xs","align","isArray","Button","variant","onClick","map","splittetProperty","split","sp","renderButton","defaultProps","connect","character","Paper","planet","movie","title","console","log","spaceship","vehicle","pluralizedSelectedSpecialCard","filteredList","prop","includes","sampledList","element","setSpecialCard","loadData","setGameSettings","addToCounter","currentCounter","resetCounter","useState","allLoaded","setAllLoaded","useEffect","fetch","process","then","response","json","Object","entries","entry","every","className","LinearProgress","value","color","disabled","sampledCharacters","Typography","Container","maxWidth","style","margin","fontWeight","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fbcd736b.chunk.js","sourcesContent":["export const SET_CARD = \"SET_CARD\";\r\nexport const LOAD_DATA = \"LOAD_DATA\";\r\nexport const SET_SPECIAL_CARD = \"SET_SPECIAL_CARD\";\r\nexport const SET_GAME_SETTINGS = \"SET_GAME_SETTINGS\";\r\nexport const RESET_COUNTER = \"RESET_COUNTER\";\r\nexport const ADD_TO_COUNTER = \"ADD_TO_COUNTER\";","/* eslint-disable import/no-anonymous-default-export */\r\nimport { SET_CARD, SET_SPECIAL_CARD } from \"../actions/types.js\";\r\n\r\nconst initialState = {\r\n  selectedCard: {\r\n    type: null,\r\n    name: null,\r\n    propertyInfo: {},\r\n  },\r\n  selectedSpecialCard: null,\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case SET_CARD:\r\n      return {\r\n        ...state,\r\n        selectedCard: action.payload,\r\n      };\r\n    case SET_SPECIAL_CARD:\r\n      return {\r\n        ...state,\r\n        selectedSpecialCard: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nimport { LOAD_DATA } from \"../actions/types.js\";\r\n\r\nconst initialState = {\r\n  data: {\r\n    movies: [],\r\n    characters: [],\r\n    planets: [],\r\n    species: [],\r\n    spaceships: [],\r\n    vehicles: [],\r\n  },\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case LOAD_DATA:\r\n      return {\r\n        ...state,\r\n        data: { ...state.data, ...action.payload },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nimport { SET_GAME_SETTINGS, ADD_TO_COUNTER, RESET_COUNTER } from \"../actions/types.js\";\r\n\r\nconst initialState = {\r\n  settings: {\r\n    on: false,\r\n    target: null,\r\n    level: \"easy\",\r\n    explore: false,\r\n  },\r\n  counter: -1,\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case SET_GAME_SETTINGS:\r\n      return {\r\n        ...state,\r\n        settings: action.payload,\r\n      };\r\n    case ADD_TO_COUNTER:\r\n      return {\r\n        ...state,\r\n        counter: action.payload\r\n      }\r\n    case RESET_COUNTER:\r\n      return {\r\n        ...state,\r\n        counter: -1,\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport card from \"./card\";\r\nimport data from \"./data\";\r\nimport game from \"./game\";\r\n\r\nexport default combineReducers({\r\n  card,\r\n  data,\r\n  game,\r\n});\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers'\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware)),\r\n);\r\n\r\nexport default store;","import { SET_CARD, SET_SPECIAL_CARD } from \"../actions/types.js\";\r\n\r\n// Set card:\r\nexport const setCard = (cardType, name, propertyInfo = {}) => (dispatch) => {\r\n  dispatch({\r\n    type: SET_CARD,\r\n    payload: {\r\n      type: cardType,\r\n      name: name,\r\n      propertyInfo: propertyInfo,\r\n    },\r\n  });\r\n};\r\n\r\n// Set special card:\r\nexport const setSpecialCard = (type) => (dispatch) => {\r\n  dispatch({\r\n    type: SET_SPECIAL_CARD,\r\n    payload: type,\r\n  });\r\n};\r\n","const sampleWithoutReplacement = (bucket, n) => {\r\n  n = Math.min(n, bucket.length);\r\n\r\n  // Array of indeces 0 to n:\r\n  var idxs = [...Array(bucket.length).keys()]\r\n\r\n  // Select a random index and remove it while returning:\r\n  const getRandomIndex = () => {\r\n    var randomIndex = Math.floor(Math.random() * idxs.length);\r\n    return idxs.splice(randomIndex, 1)[0];\r\n  };\r\n\r\n  var sampled = [];\r\n  for (var i = 0; i < n; i++) {\r\n    sampled.push(bucket[getRandomIndex()]);\r\n  }\r\n\r\n  return sampled;\r\n};\r\n\r\nexport default sampleWithoutReplacement","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport { Button, Grid } from \"@material-ui/core\";\r\n\r\nimport { setCard } from \"../../actions/card\";\r\n\r\nimport sampleWithoutReplacement from \"../SampleWithoutReplacement\";\r\n\r\nconst getByURL = (itemList, url, fieldName = \"name\") => {\r\n  return itemList.filter((item) => item.url === url)[0][fieldName];\r\n};\r\n\r\nconst CardItem = ({ setCard, item, property, propertyName, itemList, fieldName, setCardType }) => {\r\n  if (!propertyName) {\r\n    propertyName = property.charAt(0).toUpperCase() + property.slice(1);\r\n  }\r\n  propertyName = propertyName.replace(/_/g, \" \");\r\n\r\n  const renderButton = () => {\r\n    if (item[property] && item[property] !== \"unknown\" && item[property] !== \"n/a\") {\r\n      if (itemList) {\r\n        if (Array.isArray(item[property])) {\r\n          // if the property is an empty array for species property then set it to Human:\r\n          if (property === \"species\" && item[property].length === 0) {\r\n            return (\r\n              <Button variant=\"contained\" onClick={() => setCard(setCardType, \"Human\")}>\r\n                Human\r\n              </Button>\r\n            );\r\n          }\r\n          // if the property is an array of urls (eg. list of movie urls):\r\n          const sampledItems = sampleWithoutReplacement(item[property], 5)\r\n          return sampledItems.map((i) => {\r\n            const name = getByURL(itemList, i, fieldName);\r\n            return (\r\n              <Button variant=\"contained\" onClick={() => setCard(setCardType, name)}>\r\n                {name}\r\n              </Button>\r\n            );\r\n          });\r\n        }\r\n        // if the property is a single url:\r\n        const name = getByURL(itemList, item[property], fieldName);\r\n        return (\r\n          <Button variant=\"contained\" onClick={() => setCard(setCardType, name)}>\r\n            {name}\r\n          </Button>\r\n        );\r\n      }\r\n      // if the property is a string with a list of comma separated characteristics:\r\n      const splittetProperty = item[property].split(\", \");\r\n      if (splittetProperty.length > 1) {\r\n        return splittetProperty.map((sp) => (\r\n          <Button\r\n            variant=\"contained\"\r\n            onClick={() => setCard(setCardType, sp, { property: property, fieldName: fieldName })}\r\n          >\r\n            {sp}\r\n          </Button>\r\n        ));\r\n      }\r\n\r\n      // if the property is a single value:\r\n      return (\r\n        <Button\r\n          variant=\"contained\"\r\n          onClick={() => setCard(setCardType, item[property], { property: property, fieldName: fieldName })}\r\n        >\r\n          {item[property]}\r\n        </Button>\r\n      );\r\n    }\r\n    return <div></div>;\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={1}>\r\n      <Grid item xs={5} align=\"right\">\r\n        <b>{propertyName}:</b>\r\n      </Grid>\r\n      <Grid item xs={7} align=\"left\">\r\n        {renderButton()}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\n// PropTypes:\r\nCardItem.propTypes = {\r\n  item: PropTypes.object.isRequired,\r\n  property: PropTypes.string.isRequired,\r\n  propertyName: PropTypes.string,\r\n  itemList: PropTypes.array,\r\n  fieldName: PropTypes.string,\r\n  setCardType: PropTypes.string,\r\n};\r\n\r\nCardItem.defaultProps = {\r\n  propertyName: null,\r\n  itemList: null,\r\n  fieldName: \"name\",\r\n  setCardType: \"property\",\r\n};\r\n\r\n// mapStateToProps:\r\nconst mapStateToProps = (state) => ({\r\n  data: state.data.data,\r\n});\r\n\r\nexport default connect(mapStateToProps, { setCard })(CardItem);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport { Paper, Grid } from \"@material-ui/core\";\r\n\r\nimport CardItem from \"./CardItem\";\r\n\r\nconst Character = ({ name, data }) => {\r\n  const character = data.characters.filter((character) => character.name === name)[0];\r\n\r\n  return (\r\n    <Paper>\r\n      <h1>{character.name}</h1>\r\n      <Grid container spacing={1}>\r\n        <CardItem item={character} property=\"homeworld\" itemList={data.planets} setCardType=\"planet\" />\r\n        <CardItem item={character} property=\"species\" itemList={data.species} setCardType=\"species\" />\r\n        <CardItem\r\n          item={character}\r\n          property=\"films\"\r\n          propertyName=\"movies\"\r\n          itemList={data.movies}\r\n          setCardType=\"movie\"\r\n          fieldName=\"title\"\r\n        />\r\n        <CardItem item={character} property=\"gender\" />\r\n        <CardItem item={character} property=\"skin_color\" />\r\n        <CardItem item={character} property=\"birth_year\" />\r\n        <CardItem item={character} property=\"eye_color\" />\r\n        <CardItem item={character} property=\"hair_color\" />\r\n        <CardItem item={character} property=\"height\" />\r\n        <CardItem item={character} property=\"mass\" />\r\n        <CardItem\r\n          item={character}\r\n          property=\"starships\"\r\n          propertyName=\"Spaceships\"\r\n          itemList={data.spaceships}\r\n          setCardType=\"spaceship\"\r\n        />\r\n        <CardItem item={character} property=\"vehicles\" itemList={data.vehicles} setCardType=\"vehicle\" />\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n};\r\n\r\n// PropTypes:\r\nCharacter.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n};\r\n\r\n// mapStateToProps:\r\nconst mapStateToProps = (state) => ({\r\n  data: state.data.data,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(Character);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport { Paper, Grid } from \"@material-ui/core\";\r\n\r\nimport CardItem from \"./CardItem\";\r\n\r\nconst Planet = ({ name, data }) => {\r\n  const planet = data.planets.filter((planet) => planet.name === name)[0];\r\n\r\n  return (\r\n    <Paper>\r\n      <h1>{planet.name}</h1>\r\n      <Grid container spacing={1}>\r\n        <CardItem item={planet} property=\"climate\" />\r\n        <CardItem item={planet} property=\"diameter\" />\r\n        <CardItem item={planet} property=\"gravity\" />\r\n        <CardItem item={planet} property=\"rotation_period\" />\r\n        <CardItem item={planet} property=\"orbital_period\" />\r\n        <CardItem item={planet} property=\"population\" />\r\n        <CardItem item={planet} property=\"terrain\" />\r\n        <CardItem\r\n          item={planet}\r\n          property=\"films\"\r\n          propertyName=\"Movies\"\r\n          itemList={data.movies}\r\n          fieldName=\"title\"\r\n          setCardType=\"movie\"\r\n        />\r\n        <CardItem item={planet} property=\"residents\" itemList={data.characters} setCardType=\"character\" />\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n};\r\n\r\n// PropTypes:\r\nPlanet.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n};\r\n\r\n// mapStateToProps:\r\nconst mapStateToProps = (state) => ({\r\n  data: state.data.data,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(Planet);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport { Paper, Grid } from \"@material-ui/core\";\r\n\r\nimport CardItem from \"./CardItem\";\r\n\r\nconst Movie = ({ name, data }) => {\r\n  const movie = data.movies.filter((movie) => movie.title === name)[0];\r\n\r\n  return (\r\n    <Paper>\r\n      <h1>{movie.title}</h1>\r\n      <Grid container spacing={1}>\r\n        <CardItem item={movie} property=\"director\" fieldName=\"title\"/>\r\n        <CardItem item={movie} property=\"producer\" fieldName=\"title\"/>\r\n        <CardItem item={movie} property=\"release_date\" fieldName=\"title\"/>\r\n        <CardItem item={movie} property=\"characters\" itemList={data.characters} setCardType=\"character\" />\r\n        <CardItem item={movie} property=\"planets\" itemList={data.planets} setCardType=\"planet\" />\r\n        <CardItem item={movie} property=\"species\" itemList={data.species} setCardType=\"species\" />\r\n        <CardItem\r\n          item={movie}\r\n          property=\"starships\"\r\n          propertyName=\"Spaceships\"\r\n          itemList={data.spaceships}\r\n          setCardType=\"spaceship\"\r\n        />\r\n        <CardItem item={movie} property=\"vehicles\" itemList={data.vehicles} setCardType=\"vehicle\" />\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n};\r\n\r\n// PropTypes:\r\nMovie.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n};\r\n\r\n// mapStateToProps:\r\nconst mapStateToProps = (state) => ({\r\n  data: state.data.data,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(Movie);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport { Paper, Grid } from \"@material-ui/core\";\r\n\r\nimport CardItem from \"./CardItem\";\r\n\r\nconst Species = ({ name, data }) => {\r\n  const species = data.species.filter((species) => species.name === name)[0];\r\n  console.log(species);\r\n\r\n  return (\r\n    <Paper>\r\n      <h1>{species.name}</h1>\r\n      <Grid container spacing={1}>\r\n        <CardItem item={species} property=\"homeworld\" itemList={data.planets} setCardType=\"planet\" />\r\n        <CardItem item={species} property=\"classification\" />\r\n        <CardItem item={species} property=\"designation\" />\r\n        <CardItem item={species} property=\"language\" />\r\n        <CardItem item={species} property=\"average_lifespan\" />\r\n        <CardItem item={species} property=\"average_height\" />\r\n        <CardItem item={species} property=\"skin_colors\" />\r\n        <CardItem item={species} property=\"hair_colors\" />\r\n        <CardItem item={species} property=\"eye_colors\" />\r\n        <CardItem\r\n          item={species}\r\n          property=\"films\"\r\n          propertyName=\"Movies\"\r\n          itemList={data.movies}\r\n          fieldName=\"title\"\r\n          setCardType=\"movie\"\r\n        />\r\n        <CardItem item={species} property=\"people\" itemList={data.characters} setCardType=\"character\" />\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n};\r\n\r\n// PropTypes:\r\nSpecies.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n};\r\n\r\n// mapStateToProps:\r\nconst mapStateToProps = (state) => ({\r\n  data: state.data.data,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(Species);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport { Paper, Grid } from \"@material-ui/core\";\r\n\r\nimport CardItem from \"./CardItem\";\r\n\r\nconst Spaceship = ({ name, data }) => {\r\n  const spaceship = data.spaceships.filter((spaceship) => spaceship.name === name)[0];\r\n\r\n  return (\r\n    <Paper>\r\n      <h1>{spaceship.name}</h1>\r\n      <Grid container spacing={1}>\r\n        <CardItem item={spaceship} property=\"model\" />\r\n        <CardItem item={spaceship} property=\"manufacturer\" />\r\n        <CardItem item={spaceship} property=\"cost_in_credits\" />\r\n        <CardItem item={spaceship} property=\"crew\" />\r\n        <CardItem item={spaceship} property=\"length\" />\r\n        <CardItem item={spaceship} property=\"max_atmosphering_speed\" />\r\n        <CardItem item={spaceship} property=\"hyperdrive_rating\" />\r\n        <CardItem\r\n          item={spaceship}\r\n          property=\"films\"\r\n          propertyName=\"Movies\"\r\n          itemList={data.movies}\r\n          fieldName=\"title\"\r\n          setCardType=\"movie\"\r\n        />\r\n        <CardItem item={spaceship} property=\"pilots\" itemList={data.characters} setCardType=\"character\" />\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n};\r\n\r\n// PropTypes:\r\nSpaceship.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n};\r\n\r\n// mapStateToProps:\r\nconst mapStateToProps = (state) => ({\r\n  data: state.data.data,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(Spaceship);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport { Paper, Grid } from \"@material-ui/core\";\r\n\r\nimport CardItem from \"./CardItem\";\r\n\r\nconst Vehicle = ({ name, data }) => {\r\n  const vehicle = data.vehicles.filter((vehicle) => vehicle.name === name)[0];\r\n\r\n  return (\r\n    <Paper>\r\n      <h1>{vehicle.name}</h1>\r\n      <Grid container spacing={1}>\r\n        <CardItem item={vehicle} property=\"model\" />\r\n        <CardItem item={vehicle} property=\"manufacturer\" />\r\n        <CardItem item={vehicle} property=\"cost_in_credits\" />\r\n        <CardItem item={vehicle} property=\"crew\" />\r\n        <CardItem item={vehicle} property=\"length\" />\r\n        <CardItem item={vehicle} property=\"max_atmosphering_speed\" />\r\n        <CardItem\r\n          item={vehicle}\r\n          property=\"films\"\r\n          propertyName=\"Movies\"\r\n          itemList={data.movies}\r\n          fieldName=\"title\"\r\n          setCardType=\"movie\"\r\n        />\r\n        <CardItem item={vehicle} property=\"pilots\" itemList={data.characters} setCardType=\"character\" />\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n};\r\n\r\n// PropTypes:\r\nVehicle.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n};\r\n\r\n// mapStateToProps:\r\nconst mapStateToProps = (state) => ({\r\n  data: state.data.data,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(Vehicle);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport { Paper, Grid, Button } from \"@material-ui/core\";\r\n\r\nimport sampleWithoutReplacement from \"../SampleWithoutReplacement\";\r\n\r\nimport CardItem from \"./CardItem\";\r\n\r\nimport { setCard } from \"../../actions/card\";\r\n\r\nconst PropertyCard = ({ name, propertyInfo, data, selectedSpecialCard, setCard }) => {\r\n  const pluralizedSelectedSpecialCard =\r\n    selectedSpecialCard.charAt(selectedSpecialCard.length - 1) === \"s\"\r\n      ? selectedSpecialCard\r\n      : selectedSpecialCard + \"s\";\r\n\r\n  const filteredList = data[pluralizedSelectedSpecialCard].filter((prop) => prop[propertyInfo.property].includes(name));\r\n\r\n  const sampledList = sampleWithoutReplacement(filteredList, 5)\r\n\r\n  return (\r\n    <Paper>\r\n      <h1>{name}</h1>\r\n      <Grid container spacing={1}>\r\n        <h2>{propertyInfo.property}</h2>\r\n        <Grid container spacing={1}>\r\n          <Grid item xs={5} align=\"right\">\r\n            <b>{pluralizedSelectedSpecialCard.charAt(0).toUpperCase() + pluralizedSelectedSpecialCard.slice(1)}:</b>\r\n          </Grid>\r\n          <Grid item xs={7} align=\"left\">\r\n            {sampledList.map((element) => {\r\n              return (\r\n                <Button\r\n                  variant=\"contained\"\r\n                  onClick={() => setCard(selectedSpecialCard, element[propertyInfo.fieldName])}\r\n                >\r\n                  {element[propertyInfo.fieldName]}\r\n                </Button>\r\n              );\r\n            })}\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n};\r\n\r\n// PropTypes:\r\nPropertyCard.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  propertyInfo: PropTypes.string.isRequired,\r\n};\r\n\r\n// mapStateToProps:\r\nconst mapStateToProps = (state) => ({\r\n  data: state.data.data,\r\n  selectedSpecialCard: state.card.selectedSpecialCard,\r\n});\r\n\r\nexport default connect(mapStateToProps, { setCard })(PropertyCard);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport Character from \"./cards/Character\";\r\nimport Planet from \"./cards/Planet\";\r\nimport Movie from \"./cards/Movie\";\r\nimport Species from \"./cards/Species\";\r\nimport Spaceship from \"./cards/Spaceship\";\r\nimport Vehicle from \"./cards/Vehicle\";\r\nimport PropertyCard from \"./cards/PropertyCard\";\r\n\r\nimport { setSpecialCard } from \"../actions/card\";\r\n\r\nconst CardSelector = ({ selectedCard, data, setSpecialCard }) => {\r\n  selectedCard.type !== \"property\" && setSpecialCard(selectedCard.type);\r\n  switch (selectedCard.type) {\r\n    case \"character\":\r\n      return <Character name={selectedCard.name} />;\r\n    case \"planet\":\r\n      return <Planet name={selectedCard.name} />;\r\n    case \"movie\":\r\n      return <Movie name={selectedCard.name} />;\r\n    case \"species\":\r\n      return <Species name={selectedCard.name} />;\r\n    case \"spaceship\":\r\n      return <Spaceship name={selectedCard.name} />;\r\n    case \"vehicle\":\r\n      return <Vehicle name={selectedCard.name} />;\r\n    case \"property\":\r\n      return <PropertyCard name={selectedCard.name} propertyInfo={selectedCard.propertyInfo} />;\r\n    default:\r\n      return <div>Nothing has been selected</div>;\r\n  }\r\n};\r\n\r\n// PropTypes:\r\nCardSelector.propTypes = {\r\n  selectedCard: PropTypes.object.isRequired,\r\n  setSpecialCard: PropTypes.func.isRequired,\r\n};\r\n\r\n// mapStateToProps:\r\nconst mapStateToProps = (state) => ({\r\n  selectedCard: state.card.selectedCard,\r\n  data: state.data.data,\r\n});\r\n\r\nexport default connect(mapStateToProps, { setSpecialCard })(CardSelector);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport { LinearProgress, Button, Container, Grid, Typography } from \"@material-ui/core\";\r\nimport \"./App.css\";\r\nimport CardSelector from \"./CardSelector\";\r\nimport sampleWithoutReplacement from \"./SampleWithoutReplacement\";\r\n\r\nimport { setCard } from \"../actions/card\";\r\nimport { loadData } from \"../actions/data\";\r\nimport { setGameSettings, addToCounter, resetCounter } from \"../actions/game\";\r\n\r\nconst App = ({\r\n  data,\r\n  selectedCard,\r\n  setCard,\r\n  loadData,\r\n  settings,\r\n  counter,\r\n  setGameSettings,\r\n  addToCounter,\r\n  resetCounter,\r\n}) => {\r\n  const [allLoaded, setAllLoaded] = useState(false);\r\n\r\n  const loadAllData = () => {\r\n    fetch(`${process.env.PUBLIC_URL}/sw_api_data/films.json`)\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        loadData({ movies: response[\"items\"] });\r\n      });\r\n    fetch(`${process.env.PUBLIC_URL}/sw_api_data/people.json`)\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        loadData({ characters: response[\"items\"] });\r\n      });\r\n    fetch(`${process.env.PUBLIC_URL}/sw_api_data/planets.json`)\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        loadData({ planets: response[\"items\"] });\r\n      });\r\n    fetch(`${process.env.PUBLIC_URL}/sw_api_data/species.json`)\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        loadData({ species: response[\"items\"] });\r\n      });\r\n    fetch(`${process.env.PUBLIC_URL}/sw_api_data/starships.json`)\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        loadData({ spaceships: response[\"items\"] });\r\n      });\r\n    fetch(`${process.env.PUBLIC_URL}/sw_api_data/vehicles.json`)\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        loadData({ vehicles: response[\"items\"] });\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadAllData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setAllLoaded(\r\n      Object.entries(data)\r\n        .map((entry) => entry[1].length)\r\n        .every((item) => item > 0)\r\n    );\r\n  }, [data]);\r\n\r\n  useEffect(() => {\r\n    addToCounter(counter);\r\n  }, [selectedCard]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <LinearProgress variant=\"determinate\" value={allLoaded === true ? 100 : 0} />\r\n\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"secondary\"\r\n        disabled={!allLoaded}\r\n        onClick={() => {\r\n          const sampledCharacters = sampleWithoutReplacement(data.characters, 2);\r\n          setGameSettings({ ...settings, target: sampledCharacters[1].name });\r\n          setCard(\"character\", sampledCharacters[0].name);\r\n          resetCounter();\r\n        }}\r\n      >\r\n        Start Game\r\n      </Button>\r\n\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        disabled={!allLoaded}\r\n        onClick={() => {\r\n          setCard(\"character\", sampleWithoutReplacement(data.characters, 1)[0].name);\r\n          resetCounter();\r\n        }}\r\n      >\r\n        Explore\r\n      </Button>\r\n\r\n      <Button disabled>{counter}</Button>\r\n\r\n      <Typography>Target character: {settings.target}</Typography>\r\n\r\n      <Container maxWidth=\"xs\" >\r\n        <CardSelector />\r\n        {settings.target === selectedCard.name && (\r\n        <Typography style={{ margin: \"20px 0px\", fontWeight: \"bold\" }}>\r\n          Congratulations! You have got to {settings.target} in {counter} steps.\r\n        </Typography>\r\n      )}\r\n      </Container>\r\n\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\n// PropTypes:\r\nApp.propTypes = {\r\n  selectedCard: PropTypes.object.isRequired,\r\n  setCard: PropTypes.func.isRequired,\r\n  loadData: PropTypes.func.isRequired,\r\n  setGameSettings: PropTypes.func.isRequired,\r\n  addToCounter: PropTypes.func.isRequired,\r\n  resetCounter: PropTypes.func.isRequired,\r\n  counter: PropTypes.number.isRequired,\r\n  settings: PropTypes.object.isRequired,\r\n};\r\n\r\n// mapStateToProps:\r\nconst mapStateToProps = (state) => ({\r\n  selectedCard: state.card.selectedCard,\r\n  data: state.data.data,\r\n  counter: state.game.counter,\r\n  settings: state.game.settings,\r\n});\r\n\r\nexport default connect(mapStateToProps, { setCard, loadData, setGameSettings, addToCounter, resetCounter })(App);\r\n","import { LOAD_DATA } from \"../actions/types.js\";\r\n\r\n// Set Data:\r\nexport const loadData = (data) => (dispatch) => {\r\n  dispatch({\r\n    type: LOAD_DATA,\r\n    payload: data,\r\n  });\r\n};\r\n","import { SET_GAME_SETTINGS, ADD_TO_COUNTER, RESET_COUNTER } from \"../actions/types.js\";\r\n\r\n// Set Game Settings:\r\nexport const setGameSettings = (settings) => (dispatch) => {\r\n  dispatch({\r\n    type: SET_GAME_SETTINGS,\r\n    payload: settings,\r\n  });\r\n};\r\n\r\n// Add to counter:\r\nexport const addToCounter = (currentCounter) => (dispatch) => {\r\n  dispatch({\r\n    type: ADD_TO_COUNTER,\r\n    payload: currentCounter + 1,\r\n  });\r\n};\r\n\r\n// Add to counter:\r\nexport const resetCounter = () => (dispatch) => {\r\n  dispatch({\r\n    type: RESET_COUNTER,\r\n    payload: null,\r\n  });\r\n};","import React from \"react\";\r\nimport { Provider } from \"react-redux\"; // wrap this around everything for redux\r\nimport store from \"../store\";\r\nimport App from \"./App\";\r\n\r\nconst Root = () => {\r\n  return (\r\n    <Provider store={store}>\r\n      <div>\r\n        <App />\r\n      </div>\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default Root;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport Root from \"./components/Root\";\r\n\r\nReactDOM.render(<Root />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}